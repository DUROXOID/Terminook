#include <stdio.h>
#include <stdlib.h>
#define width 210
#define height 30
#define area width*height
#define column 1
#define row width
#define air ' '
#define platform '_'
#define Uslope '/'
#define Dslope '\\'
#define Rcloud '('
#define Lcloud ')'
#define plant '|'
#define flower '@'
#define stem '+'
#define star '*'
#define seed 11
int main(int argc, char** argv) {
	int t;
	int i;
	int cloudVal;
	int userIndex;
	char term[area];
	userIndex = width*3+15;
	for(i = 1; i <= area; i++){
		term[i] = air;
	}
	i =1+ width*25;
	while(!(i%width == 0)){
		switch (rand()%seed%i){
			case 0:
				i+= row;
				term[i] = Dslope;
				i+= column;
				term[i] = platform;
				i+= column;
			case 1:
				term[i] = Uslope;
				i+= column - row;
			case 2:
				term[i] = stem;
				term[i-row] = flower;
				i+= column;
			case 23:
				cloudVal = (rand()%2)+3;
				term[i] = platform;
				for (t = 0; t<cloudVal; t++){
					term[i+1-t*(row)] = plant;
				}
				term[i+2] = platform;
				for (t = 0; t<cloudVal; t++){
					term[i+3-t*(row)] = plant;
				}
				term[i+4] = platform;
				for (t = 0; t<5; t++){
					term[i+t*(column)-cloudVal*(row)] = platform;
				}
				for (t = 0; t<5; t++){
					term[i+t*(column)-(cloudVal+3)*(row)] = platform;
				}
				term[i-column-cloudVal*(row)] = Rcloud;
				term[i-2*column-(cloudVal+1)*(row)] = Rcloud;
				term[i-column-(cloudVal+2)*(row)] = Rcloud;
				term[i+5*(column)-cloudVal*(row)] = Lcloud;
				term[i+6*(column)-(cloudVal+1)*(row)] = Lcloud;
				term[i+5*(column)-(cloudVal+2)*(row)] = Lcloud;
				for(t = 0; t<5; t++){
					i += column;
					if(i%width == 0){
						return 0;
					}
				}
			case 24:
				cloudVal = (rand()%9)+10;
				term[i] = platform;
				term[i-5*column-cloudVal*(row)] = Rcloud;
				term[i+5*column-cloudVal*(row)] = Lcloud;
				term[i-5*column-(cloudVal+2)*(row)] = Rcloud;
				term[i+5*column-(cloudVal+2)*(row)] = Lcloud;
				term[i-6*column-(cloudVal+1)*(row)] = Rcloud;
				term[i+6*column-(cloudVal+1)*(row)] = Lcloud;
				for (t = 0; t<9; t++){
					term[i-4+t*(column)-cloudVal*(row)] = platform;
				}
				for (t = 0; t<9; t++){
					term[i-4+t*(column)-(cloudVal+3)*(row)] = platform;
				}
			default:
				term[i] = platform;
				i+= column;
		}
	}
	userIndex -=5;
	while (0 == 0){
		//player controlled movement
		t = getchar();
		if(t == 97){
			userIndex -= column;
		}else if(t == 100){
			userIndex += column;
		}else if(t == 103){
			userIndex = 310;
		}
		//terrain edited movement and render
		if(t == 97 || t == 100){
			if(term[userIndex] == Uslope || term[userIndex] == Dslope){
				userIndex -= row;
			} else if(term[userIndex] == air){
				userIndex += row;
			}	
			system("cls");
			for(i = 1; i <= area; i++){
				//render player
				if (i ==userIndex){
					printf("A");
				}else if (i == userIndex-row){
					printf("|");
				}else if (i ==userIndex-row-column){
					printf("/");
				}else if (i ==userIndex-row+column){
					printf("\\");
				}else if (i ==userIndex-2*(row)){
					printf("o");	
				}else{
					//render world
					putchar(term[i]);
				}
				if(i%width == 0){
					printf("\n");
				}
			}
		}
	}
}
