#include <stdio.h>
#include <stdlib.h>
#include <conio.h>
#define width 200
#define height 35
#define area width*height
#define column 1
#define row width
//items
#define air ' '
#define platform '_'
#define Uslope '/'
#define Dslope '\\'
#define Rcloud '('
#define Lcloud ')'
#define plant '|'
#define flower '@'
#define stem '+'
#define star '*'
//directions
#define UP 119
#define LEFT 97
#define RIGHT 100
#define ULEFT 65
#define URIGHT 68
//world gen
#define seed 10
#define CLOUD 24
#define TREE 23
#define DSLOPE 0
#define USLOPE 1
#define FLOWER 2
int main(int argc, char** argv) {
	int keyUpdated;
	int walkAni;
	int t;
	int i;
	int variationVal;
	int userIndex;
	char term[area];
	walkAni = 0;
	keyUpdated = 0;
	userIndex = width*3+15;
	for(i = 1; i <= area; i++){
		term[i] = air;
	}
	i =1+ width*25;
	while(!(i%width == 0)){
		switch (rand()%seed%i){
			case DSLOPE:
				i+= row;
				term[i] = Dslope;
				i+= column;
				if(i%width == 0){
					break;
				}
				for(t = 0; t < 3; t++){
					term[i] = platform;
					i+= column;
					if(i%width == 0){
						break;
					}
				}
			case USLOPE:
				term[i] = Uslope;
				i+= column - row;
				if(i%width == 0){
					break;
				}
			case FLOWER:
				term[i] = stem;
				term[i-row] = flower;
				i+= column;
				if(i%width == 0){
					break;
				}
			case TREE:
				variationVal = (rand()%2)+3;
				term[i] = platform;
				for (t = 0; t<variationVal; t++){
					term[i+1-t*(row)] = plant;
				}
				term[i+2] = platform;
				for (t = 0; t<variationVal; t++){
					term[i+3-t*(row)] = plant;
				}
				term[i+4] = platform;
				for (t = 0; t<5; t++){
					term[i+t*(column)-variationVal*(row)] = platform;
				}
				for (t = 0; t<5; t++){
					term[i+t*(column)-(variationVal+3)*(row)] = platform;
				}
				term[i-column-variationVal*(row)] = Rcloud;
				term[i-2*column-(variationVal+1)*(row)] = Rcloud;
				term[i-column-(variationVal+2)*(row)] = Rcloud;
				term[i+5*(column)-variationVal*(row)] = Lcloud;
				term[i+6*(column)-(variationVal+1)*(row)] = Lcloud;
				term[i+5*(column)-(variationVal+2)*(row)] = Lcloud;
				for(t = 0; t<5; t++){
					i += column;
					if(i%width == 0){
						//-1 as default still runs
						break;
					}
				}
				if(i%width == 0){
					break;
				}
			case CLOUD:
				//here break statement isnt needed as cloud does no incrementatio
				variationVal = (rand()%9)+10;
				term[i] = platform;
				term[i-5*column-variationVal*(row)] = Rcloud;
				term[i+5*column-variationVal*(row)] = Lcloud;
				term[i-5*column-(variationVal+2)*(row)] = Rcloud;
				term[i+5*column-(variationVal+2)*(row)] = Lcloud;
				term[i-6*column-(variationVal+1)*(row)] = Rcloud;
				term[i+6*column-(variationVal+1)*(row)] = Lcloud;
				for (t = 0; t<9; t++){
					term[i-4+t*(column)-variationVal*(row)] = platform;
				}
				for (t = 0; t<9; t++){
					term[i-4+t*(column)-(variationVal+3)*(row)] = platform;
				}
			default:
				term[i] = platform;
				i+= column;
				if(i%width == 0){
					break;
				}
		}
	}
	system("mode con:cols=200 lines=35");
	printf("PRESS ANY KEY TO START> ");
	while (0 == 0){
		//player controlled movement
		t = 0;
		while (!(t == LEFT || t == RIGHT || t == UP || t == ULEFT || t == URIGHT)){
			t = getch();
		}
		keyUpdated = 0;
		if(t == LEFT){
			userIndex -= column;
		}else if(t == RIGHT){
			userIndex += column;
		}else if(t == UP){
			userIndex -= row;
			if(term[userIndex] == plant){
				walkAni = 0;
			} else{
				walkAni = 1;
			}
		}else if(t == ULEFT){
			userIndex -= column+row+row;
		}else if(t == URIGHT){
			userIndex += column-row-row;
		}
		//terrain edited movement and render
		if(t == LEFT || t == RIGHT || t == ULEFT || t == URIGHT){
			if(term[userIndex] == Uslope || term[userIndex] == Dslope){
				userIndex -= row;
			} else if((term[userIndex] == air) && !(term[userIndex+row] == Uslope || term[userIndex+row] == Dslope)){
				userIndex += row;
			}
			walkAni = 1-walkAni;
		}
		while((term[userIndex] == air && !(term[userIndex+row] == Uslope || term[userIndex+row] == Dslope)) || keyUpdated == 0){
			if(keyUpdated == 1){
				userIndex += row;
				walkAni = 0;
			}
			system("mode con:cols=200 lines=35");
			system("cls");
			//cycles through term and prints character or world section
			for(i = 0; i < area; i++){
				//render player
				if (i ==userIndex && walkAni == 0){
					printf("A");
				}else if (i == userIndex-column && walkAni == 1){
					printf("/");
				}else if (i == userIndex+column && walkAni == 1){
					printf("\\");
				}else if (i == userIndex-row){
					printf("|");
				}else if (i ==userIndex-row-column){
					printf("/");
				}else if (i ==userIndex-row+column){
					printf("\\");
				}else if (i ==userIndex-2*(row)){
					printf("o");
				}else{
					//render world
					putchar(term[i]);
				}
			}
			keyUpdated = 1;
		}
	}
}
